{"cells":[{"cell_type":"markdown","metadata":{"id":"7Z2jcRKwUHqV"},"source":["This notebook provides recipes for loading and saving data from external sources."]},{"cell_type":"markdown","metadata":{"id":"eikfzi8ZT_rW"},"source":["# Local file system"]},{"cell_type":"markdown","metadata":{"id":"BaCkyg5CV5jF"},"source":["## Uploading files from your local file system\n","\n","`files.upload` returns a dictionary of the files which were uploaded.\n","The dictionary is keyed by the file name and values are the data which were uploaded."]},{"cell_type":"code","source":["!git clone https://github.com/ayush1997/YouTube-Like-predictor.git"],"metadata":{"id":"6fsxoO9Lqji-","executionInfo":{"status":"ok","timestamp":1680366970336,"user_tz":-330,"elapsed":3858,"user":{"displayName":"","userId":""}},"outputId":"4287e3eb-a302-49d4-89d8-5a7b51112631","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'YouTube-Like-predictor'...\n","remote: Enumerating objects: 112, done.\u001b[K\n","remote: Total 112 (delta 0), reused 0 (delta 0), pack-reused 112\u001b[K\n","Receiving objects: 100% (112/112), 43.53 MiB | 20.80 MiB/s, done.\n","Resolving deltas: 100% (42/42), done.\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import pickle\n","import requests\n","import random\n","import time\n","import math\n","import sys\n","\n","arg = sys.argv\n","V_id = arg[1:]\n","print\"Video IDs\",V_id\n","\n","API_KEYS = [\"AIzaSyAgzszK84rYUM0ErWSdtiV-tyNGqGB3xFg\",\"AIzaSyA3uNDJDl6WH0z8t9uB9pdmbIBpf54PVIE\",\"AIzaSyCcLbOx4L6iTcS4NnvviLa1TfE7I1mnccU\",\"AIzaSyAOpWL4ijH4vjO6sOF5ORIzohy_o2shL9s\",\"AIzaSyCp8TYUqMn5LMgeHDvBcNcd2Y3pGbgVTAg\"]\n","\n","data={\"V_id\":[],\"channelId\":[],\"publishedAt\":[],\"commentCount\":[],\"dislikeCount\":[],\"likeCount\":[],\"viewCount\":[],\"publishedAt\":[],\"categoryId\":[],\"ChannelPublishedAt\":[],\"channel_videoCount\":[],\"channel_subscriberCount\":[],\"channel_ViewCount\":[]}\n","channel_dict = {}\n","\n","columns = ['categoryId', 'channel_subscriberCount', 'definition', 'likeCount', 'dislikeCount', 'viewCount', 'commentCount', 'viewCount/channel_month_old', 'viewCount/video_month_old', 'viewCount/http_in_descp', 'viewCount/NoOfTags', 'viewCount/tags_in_desc', 'subscriberCount/videoCount', 'channelViewCount/channeVideoCount', 'channelViewCount/socialLink']\n","# ['dislikeCount', 'viewCount', 'commentCount','viewCount/video_month_old','subscriberCount/videoCount','channel_subscriberCount','subscriberCount/videoCount','viewCount/channel_month_old']\n","\n","# The function returns the final URL for request\n","def get_url(Video_urls):\n","    v_id =  \",\".join(Video_urls)\n","    k = random.randint(0,4)\n","    API_KEY = API_KEYS[k]\n","    url = \"https://www.googleapis.com/youtube/v3/videos?part=status,snippet,topicDetails,contentDetails,statistics&id=\"+v_id+\"&key=\"+API_KEY\n","    return url\n","\n","# This function populates the data dictionary\n","def add_data(i,key1,key2,key3=\"NA\"):\n","    if key3!=\"NA\":\n","        try:\n","            data[key1].append(i[key2][key3])\n","        except Exception,err:\n","            if key1 in ['viewCount', 'commentCount','dislikeCount','publishedAt','channel_videoCount','channel_subscriberCount']:\n","                print i[\"id\"]\n","                print key1+\"missing\"\n","            data[key1].append(0)\n","    else:\n","        try:\n","            data[key1].append(i[key2])\n","        except:\n","            data[key1].append(None)\n","\n","# The function is used to get the Video relevant data\n","def video_data(get_json):\n","    for i in get_json[\"items\"]:\n","\n","# -----------------------------------VIDEO RELATED FEATURES   ---------------------------------------------------------------------\n","\n","        # add_data(i,key1=\"tags\",key2=\"snippet\",key3=\"tags\")\n","\n","        add_data(i,key1=\"commentCount\",key2=\"statistics\",key3=\"commentCount\")\n","\n","        add_data(i,key1=\"dislikeCount\",key2=\"statistics\",key3=\"dislikeCount\")\n","\n","        add_data(i,key1=\"V_id\",key2='id')\n","\n","        add_data(i,key1=\"categoryId\",key2=\"snippet\",key3=\"categoryId\")\n","\n","        add_data(i,key1=\"publishedAt\",key2=\"snippet\",key3=\"publishedAt\")\n","\n","        add_data(i,key1=\"likeCount\",key2=\"statistics\",key3=\"likeCount\")\n","\n","        add_data(i,key1=\"viewCount\",key2=\"statistics\",key3=\"viewCount\")\n","\n","        add_data(i,key1=\"channelId\",key2=\"snippet\",key3=\"channelId\")\n","\n","# It gets the channel relevant data\n","\n","def channel_data():\n","\n","    channel_id = \",\".join(data[\"channelId\"])\n","\n","    k = random.randint(0,4)\n","    API_KEY = API_KEYS[k]\n","    url = \"https://www.googleapis.com/youtube/v3/channels?part=snippet,statistics&id=\"+channel_id+\"&key=\"+API_KEY\n","    # print url\n","    r = requests.get(url)\n","    get_json = r.json()\n","\n","    if len(set(data[\"channelId\"])) == len(data[\"channelId\"]):\n","        for i in get_json[\"items\"]:\n","            add_data(i,key1=\"ChannelPublishedAt\",key2=\"snippet\",key3=\"publishedAt\")\n","\n","            add_data(i,key1=\"channel_ViewCount\",key2=\"statistics\",key3=\"viewCount\")\n","            add_data(i,key1=\"channel_subscriberCount\",key2=\"statistics\",key3=\"subscriberCount\")\n","            add_data(i,key1=\"channel_videoCount\",key2=\"statistics\",key3=\"videoCount\")\n","    else:\n","        for i in get_json[\"items\"]:\n","            channel_dict[i[\"id\"]]={}\n","            # add_data(i,key1=\"channelTitle\",key2=\"snippet\",key3=\"title\")\n","            # add_data(i,key1=\"ChannelDescription\",key2=\"snippet\",key3=\"description\")\n","            channel_dict[i[\"id\"]][\"ChannelPublishedAt\"] = i[\"snippet\"][\"publishedAt\"]\n","            channel_dict[i[\"id\"]][\"channel_ViewCount\"] = i[\"statistics\"][\"viewCount\"]\n","            channel_dict[i[\"id\"]][\"channel_subscriberCount\"] = i[\"statistics\"][\"subscriberCount\"]\n","            channel_dict[i[\"id\"]][\"channel_videoCount\"] = i[\"statistics\"][\"videoCount\"]\n","        # print channel_dict\n","\n","        for j in data[\"channelId\"]:\n","            add_data(channel_dict,key1=\"ChannelPublishedAt\",key2=j,key3=\"ChannelPublishedAt\")\n","            add_data(channel_dict,key1=\"channel_ViewCount\",key2=j,key3=\"channel_ViewCount\")\n","            add_data(channel_dict,key1=\"channel_subscriberCount\",key2=j,key3=\"channel_subscriberCount\")\n","            add_data(channel_dict,key1=\"channel_videoCount\",key2=j,key3=\"channel_videoCount\")\n","\n","\n","\n","def get_months(x):\n","    return 12-x.month + 1 + (2016 - (x.year+1)+1)*12\n","\n","# The function gets the data after coverting to derived features\n","def get_final_data(df):\n","\n","    df[\"months_old\"] = pd.to_datetime(df.publishedAt).apply(lambda x: get_months(x))\n","    df[\"channel_months_old\"] = pd.to_datetime(df.ChannelPublishedAt).apply(lambda x: get_months(x))\n","\n","    # print df\n","    df[\"viewCount/channel_month_old\"] = df.apply(lambda x: float(x[\"viewCount\"])/(x[\"channel_months_old\"]+1),axis=1)\n","    df[\"viewCount/video_month_old\"] = df.apply(lambda x: float(x[\"viewCount\"]) / float(x[\"months_old\"]+1),axis=1)\n","\n","    # df[\"channelViewCount/channeVideoCount\"] = df.apply(lambda x: (float(x[\"channel_ViewCount\"])+1)/(float(x[\"channel_videoCount\"])+1),axis=1)\n","    df[\"subscriberCount/videoCount\"] = df.apply(lambda x: (float(x[\"channel_subscriberCount\"])+1)/(float(x[\"channel_videoCount\"])+1),axis=1)\n","\n","    return df\n","\n","if __name__ == \"__main__\":\n","\n","    url = get_url(V_id)\n","    # print url\n","    print \"Collecting data .......\"\n","    r = requests.get(url)\n","    get_json = r.json()\n","    # print get_json\n","    video_data(get_json)\n","    channel_data()\n","\n","    print data\n","    print \"Data processing in progress ........\"\n","    df = pd.DataFrame(data)\n","    df = get_final_data(df)\n","\n","    features = ['viewCount', 'commentCount','dislikeCount','viewCount/video_month_old','subscriberCount/videoCount']\n","\n","    X_test = df[features]\n","    Y_test = df[\"likeCount\"]\n","\n","    print \"Fetching Model ........\"\n","    filename = \"model-final\"\n","    fileObject = open(filename,'r')\n","    model = pickle.load(fileObject)\n","    clf = model\n","\n","\n","    np.set_printoptions(suppress=True)\n","\n","\n","    pred  = np.ceil(clf.predict(X_test))\n","\n","    org = np.array(Y_test).astype(\"float32\")\n","\n","    err = ((pred-org)/org)*100.0\n","    \n","    V_id = data[\"V_id\"]\n","# This gives the difference between predicted and true like counts,(+) ->predicted more,(-) -> predicted less\n","    diff = pred - org\n","\n","    try:\n","        out = pd.DataFrame({\"V_ids\":V_id,\"Original\":org,\"Predicted\":pred,\"Difference(+/-)\":diff,\"Error Rate\":err})\n","        print out[['V_ids','Original','Predicted',\"Difference(+/-)\",\"Error Rate\"]]\n","    except:\n","        print \"Video ID\"+\"              \"+\"Original\"+\"              \"+\"Predicted\"+\"             \"+\"Error\"\n","        for i in zip(V_id,org, pred,((pred-org)/org)*100.0):\n","            print i[0]+\"                \"+str(i[1])+\"               \"+str(i[2])+\"                \"+str(i[3])\n","\n","\n","    print  \"R^2 Score : \",clf.score(X_test,Y_test)\n"],"metadata":{"id":"zdWmJwM6rcb9","executionInfo":{"status":"error","timestamp":1680367249573,"user_tz":-330,"elapsed":381,"user":{"displayName":"","userId":""}},"outputId":"cbec3c30-f193-4d32-c5bd-eb4ede65d6e2","colab":{"base_uri":"https://localhost:8080/","height":148}},"execution_count":null,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-3-eef53e94369a>\"\u001b[0;36m, line \u001b[0;32m12\u001b[0m\n\u001b[0;31m    print \"Video IDs\",V_id\u001b[0m\n\u001b[0m          ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m Missing parentheses in call to 'print'. Did you mean print(\"Video IDs\",V_id)?\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vz-jH8T_Uk2c"},"outputs":[],"source":["from google.colab import files\n","\n","uploaded = files.upload()\n","\n","for fn in uploaded.keys():\n","  print('User uploaded file \"{name}\" with length {length} bytes'.format(\n","      name=fn, length=len(uploaded[fn])))"]},{"cell_type":"markdown","metadata":{"id":"hauvGV4hV-Mh"},"source":["## Downloading files to your local file system\n","\n","`files.download` will invoke a browser download of the file to your local computer.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p2E4EKhCWEC5"},"outputs":[],"source":["from google.colab import files\n","\n","with open('example.txt', 'w') as f:\n","  f.write('some content')\n","\n","files.download('example.txt')"]},{"cell_type":"markdown","metadata":{"id":"c2W5A2px3doP"},"source":["# Google Drive\n","\n","You can access files in Drive in a number of ways, including:\n","- Mounting your Google Drive in the runtime's virtual machine\n","- Using a wrapper around the API such as [PyDrive](https://pythonhosted.org/PyDrive/)\n","- Using the [native REST API](https://developers.google.com/drive/v3/web/about-sdk)\n","\n","\n","\n","Examples of each are below."]},{"cell_type":"markdown","metadata":{"id":"u22w3BFiOveA"},"source":["## Mounting Google Drive locally\n","\n","The example below shows how to mount your Google Drive on your runtime using an authorization code, and how to write and read files there. Once executed, you will be able to see the new file (`foo.txt`) at [https://drive.google.com/](https://drive.google.com/).\n","\n","This only supports reading, writing, and moving files; to programmatically modify sharing settings or other metadata, use one of the other options below.\n","\n","**Note:** When using the 'Mount Drive' button in the file browser, no authentication codes are necessary for notebooks that have only been edited by the current user."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":109},"id":"RWSJpsyKqHjH","outputId":"15bd239f-5a6a-447d-dd22-01ee5398b991"},"outputs":[{"name":"stdout","output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdocs.test%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.photos.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fpeopleapi.readonly&response_type=code\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"XDg9OBaYqRMd","outputId":"5df8b65d-20d2-4956-b8a7-e99d4579d567"},"outputs":[{"name":"stdout","output_type":"stream","text":["Hello Google Drive!"]}],"source":["with open('/content/drive/My Drive/foo.txt', 'w') as f:\n","  f.write('Hello Google Drive!')\n","!cat /content/drive/My\\ Drive/foo.txt"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"D78AM1fFt2ty","outputId":"f7117bc5-2ffd-4c0a-8809-f9fed79b4682"},"outputs":[{"name":"stdout","output_type":"stream","text":["All changes made in this colab session should now be visible in Drive.\n"]}],"source":["drive.flush_and_unmount()\n","print('All changes made in this colab session should now be visible in Drive.')"]},{"cell_type":"markdown","metadata":{"id":"7taylj9wpsA2"},"source":["## PyDrive\n","\n","The examples below demonstrate authentication and file upload/download using PyDrive. More examples are available in the [PyDrive documentation](https://pythonhosted.org/PyDrive/)."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zU5b6dlRwUQk"},"outputs":[],"source":["from pydrive.auth import GoogleAuth\n","from pydrive.drive import GoogleDrive\n","from google.colab import auth\n","from oauth2client.client import GoogleCredentials"]},{"cell_type":"markdown","metadata":{"id":"XkHZtRhm09QS"},"source":["Authenticate and create the PyDrive client.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1w7lrGcW08Ds"},"outputs":[],"source":["auth.authenticate_user()\n","gauth = GoogleAuth()\n","gauth.credentials = GoogleCredentials.get_application_default()\n","drive = GoogleDrive(gauth)"]},{"cell_type":"markdown","metadata":{"id":"ZF3Topk31DCF"},"source":["Create and upload a text file.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"vBuUW-q41tb7","outputId":"e5558ef2-e5db-4e4e-9f01-186e9dd4bc26"},"outputs":[{"name":"stdout","output_type":"stream","text":["Uploaded file with ID 14vDAdqp7BSCQnoougmgylBexIr2AQx2T\n"]}],"source":["uploaded = drive.CreateFile({'title': 'Sample upload.txt'})\n","uploaded.SetContentString('Sample upload file content')\n","uploaded.Upload()\n","print('Uploaded file with ID {}'.format(uploaded.get('id')))"]},{"cell_type":"markdown","metadata":{"id":"bbOFN3d_1tcG"},"source":["Load a file by ID and print its contents.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"eFOvsAYk1tcH","outputId":"c8f0e09a-f873-4c43-8211-5f0a0c5e0e5f"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloaded content \"Sample upload file content\"\n"]}],"source":["downloaded = drive.CreateFile({'id': uploaded.get('id')})\n","print('Downloaded content \"{}\"'.format(downloaded.GetContentString()))"]},{"cell_type":"markdown","metadata":{"id":"jRQ5_yMcqJiV"},"source":["## Drive REST API\n","\n","In order to use the Drive API, we must first authenticate and construct an API client.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"r-exJtdG3XwJ"},"outputs":[],"source":["from google.colab import auth\n","auth.authenticate_user()\n","from googleapiclient.discovery import build\n","drive_service = build('drive', 'v3')"]},{"cell_type":"markdown","metadata":{"id":"eDLm7MHQEr2U"},"source":["With this client, we can use any of the functions in the [Google Drive API reference](https://developers.google.com/drive/v3/reference/). Examples follow.\n"]},{"cell_type":"markdown","metadata":{"id":"bRFyEsdfBxJ9"},"source":["### Creating a new Drive file with data from Python\n","\n","First, create a local file to upload."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":53},"id":"F1-nafvN-NwW","outputId":"4466d27b-edd0-4ef1-8a10-0e180a231af2"},"outputs":[{"name":"stdout","output_type":"stream","text":["/tmp/to_upload.txt contains:\n","my sample file"]}],"source":["with open('/tmp/to_upload.txt', 'w') as f:\n","  f.write('my sample file')\n","\n","print('/tmp/to_upload.txt contains:')\n","!cat /tmp/to_upload.txt"]},{"cell_type":"markdown","metadata":{"id":"r5X77CZ5_G-C"},"source":["Upload it using the [`files.create`](https://developers.google.com/drive/v3/reference/files/create) method. Further details on uploading files are available in the [developer documentation](https://developers.google.com/drive/v3/web/manage-uploads)."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"3Jv6jh6HEpP8","outputId":"cfc1186f-68a1-4620-a18f-99bc6d83e82e"},"outputs":[{"name":"stdout","output_type":"stream","text":["File ID: 1Cw9CqiyU6zbXFD9ViPZu_3yX-sYF4W17\n"]}],"source":["from googleapiclient.http import MediaFileUpload\n","\n","file_metadata = {\n","  'name': 'Sample file',\n","  'mimeType': 'text/plain'\n","}\n","media = MediaFileUpload('/tmp/to_upload.txt', \n","                        mimetype='text/plain',\n","                        resumable=True)\n","created = drive_service.files().create(body=file_metadata,\n","                                       media_body=media,\n","                                       fields='id').execute()\n","print('File ID: {}'.format(created.get('id')))"]},{"cell_type":"markdown","metadata":{"id":"j5VyISCKFrqU"},"source":["After executing the cell above, you will see a new file named 'Sample file' at [https://drive.google.com/](https://drive.google.com/)."]},{"cell_type":"markdown","metadata":{"id":"P3KX0Sm0E2sF"},"source":["### Downloading data from a Drive file into Python\n","\n","Download the file we uploaded above."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"hEzpzWYWsYKg","outputId":"57c1ac51-a8ec-497e-db77-f34fd974ac2f"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloaded file contents are: b'my sample file'\n"]}],"source":["file_id = created.get('id')\n","\n","import io\n","from googleapiclient.http import MediaIoBaseDownload\n","\n","request = drive_service.files().get_media(fileId=file_id)\n","downloaded = io.BytesIO()\n","downloader = MediaIoBaseDownload(downloaded, request)\n","done = False\n","while done is False:\n","  # _ is a placeholder for a progress object that we ignore.\n","  # (Our file is small, so we skip reporting progress.)\n","  _, done = downloader.next_chunk()\n","\n","downloaded.seek(0)\n","print('Downloaded file contents are: {}'.format(downloaded.read()))"]},{"cell_type":"markdown","metadata":{"id":"ImztleG2Ciae"},"source":["In order to download a different file, set `file_id` above to the ID of that file, which will look like \"1uBtlaggVyWshwcyP6kEI-y_W3P8D26sz\"."]},{"cell_type":"markdown","metadata":{"id":"sOm9PFrT8mGG"},"source":["# Google Sheets\n","\n","Our examples below use the open-source [`gspread`](https://github.com/burnash/gspread) library for interacting with Google Sheets."]},{"cell_type":"markdown","metadata":{"id":"qzi9VsEqzI-o"},"source":["Import the library, authenticate, and create the interface to Sheets."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6d0xJz3VzLOo"},"outputs":[],"source":["from google.colab import auth\n","auth.authenticate_user()\n","\n","import gspread\n","from google.auth import default\n","creds, _ = default()\n","\n","gc = gspread.authorize(creds)"]},{"cell_type":"markdown","metadata":{"id":"yjrZQUrt6kKj"},"source":["Below is a small set of `gspread` examples. Additional examples are available at the [`gspread` GitHub page](https://github.com/burnash/gspread#more-examples)."]},{"cell_type":"markdown","metadata":{"id":"WgXqE02UofZG"},"source":["## Creating a new sheet with data from Python"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tnnYKhGfzGeP"},"outputs":[],"source":["sh = gc.create('My cool spreadsheet')"]},{"cell_type":"markdown","metadata":{"id":"v9Ia9JVc6Zvk"},"source":["After executing the cell above, you will see a new spreadsheet named 'My cool spreadsheet' at [https://sheets.google.com](https://sheets.google.com/).\n","\n","Open our new sheet and add some random data."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":102},"id":"ASdgLIt2s-ux","outputId":"68c9eed9-bab9-4169-c5b7-769f7b9e0194"},"outputs":[{"data":{"text/plain":["{'spreadsheetId': '1dsQeN0YzXuM387l_CuyEbsYzL2ew9TJFzR-E-RQnwxs',\n"," 'updatedCells': 6,\n"," 'updatedColumns': 3,\n"," 'updatedRange': 'Sheet1!A1:C2',\n"," 'updatedRows': 2}"]},"execution_count":0,"metadata":{"tags":[]},"output_type":"execute_result"}],"source":["worksheet = gc.open('My cool spreadsheet').sheet1\n","\n","cell_list = worksheet.range('A1:C2')\n","\n","import random\n","for cell in cell_list:\n","  cell.value = random.randint(1, 10)\n","\n","worksheet.update_cells(cell_list)"]},{"cell_type":"markdown","metadata":{"id":"k9q0pp33dckN"},"source":["## Downloading data from a sheet into Python as a Pandas DataFrame\n","\n","Read back the random data that we inserted above and convert the result into a [Pandas DataFrame](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html)."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":141},"id":"J4QxBareshEV","outputId":"baf17cd6-3c3d-4a34-b1f9-642516cb2bfe"},"outputs":[{"name":"stdout","output_type":"stream","text":["[['6', '3', '4'], ['7', '2', '1']]\n"]},{"data":{"application/vnd.google.colaboratory.module+javascript":"\n      import \"https://ssl.gstatic.com/colaboratory/data_table/81868506e94e6988/data_table.js\";\n\n      window.createDataTable({\n        data: [[{\n            'v': 0,\n            'f': \"0\",\n        },\n\"6\",\n\"3\",\n\"4\"],\n [{\n            'v': 1,\n            'f': \"1\",\n        },\n\"7\",\n\"2\",\n\"1\"]],\n        columns: [[\"number\", \"index\"], [\"string\", \"0\"], [\"string\", \"1\"], [\"string\", \"2\"]],\n        rowsPerPage: 25,\n      });\n    ","text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>6</td>\n","      <td>3</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>7</td>\n","      <td>2</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   0  1  2\n","0  6  3  4\n","1  7  2  1"]},"execution_count":0,"metadata":{"tags":[]},"output_type":"execute_result"}],"source":["worksheet = gc.open('My cool spreadsheet').sheet1\n","\n","# get_all_values gives a list of rows.\n","rows = worksheet.get_all_values()\n","print(rows)\n","\n","import pandas as pd\n","pd.DataFrame.from_records(rows)"]},{"cell_type":"markdown","metadata":{"id":"S7c8WYyQdh5i"},"source":["# Google Cloud Storage (GCS)\n","\n","In order to use Colaboratory with GCS, you'll need to create a [Google Cloud project](https://cloud.google.com/storage/docs/projects) or use a pre-existing one.\n","\n","Specify your project ID below:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VYC5CyAbAtU7"},"outputs":[],"source":["project_id = 'Your_project_ID_here'"]},{"cell_type":"markdown","metadata":{"id":"5iRYBSVCbAlK"},"source":["Files in GCS are contained in [buckets](https://cloud.google.com/storage/docs/buckets).\n","\n","Buckets must have a globally-unique name, so we generate one here."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JgjL1e0ua-kN"},"outputs":[],"source":["import uuid\n","bucket_name = 'colab-sample-bucket-' + str(uuid.uuid1())"]},{"cell_type":"markdown","metadata":{"id":"-OtHMRVda9pJ"},"source":["In order to access GCS, we must authenticate."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NQX0hbfYaEKc"},"outputs":[],"source":["from google.colab import auth\n","auth.authenticate_user()"]},{"cell_type":"markdown","metadata":{"id":"YLPAbDDFaLXU"},"source":["GCS can be accessed via the `gsutil` command-line utility or via the native Python API."]},{"cell_type":"markdown","metadata":{"id":"TvuZEyRQXmyS"},"source":["## `gsutil`\n","\n","First, we configure `gsutil` to use the project we specified above by using `gcloud`."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"TpnuFITI6Tzu","outputId":"04f1dd6d-4d7e-4264-b37b-1e8f645d6d38"},"outputs":[{"name":"stdout","output_type":"stream","text":["Updated property [core/project].\r\n"]}],"source":["!gcloud config set project {project_id}"]},{"cell_type":"markdown","metadata":{"id":"NAM6vyXAfVUj"},"source":["Create a local file to upload."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":53},"id":"LADpx7LReOMk","outputId":"46db7cfa-9ad8-405b-f715-b466a3b2cb7a"},"outputs":[{"name":"stdout","output_type":"stream","text":["/tmp/to_upload.txt contains:\n","my sample file"]}],"source":["with open('/tmp/to_upload.txt', 'w') as f:\n","  f.write('my sample file')\n","\n","print('/tmp/to_upload.txt contains:')\n","!cat /tmp/to_upload.txt"]},{"cell_type":"markdown","metadata":{"id":"sSz0aInzWXFI"},"source":["Make a bucket to which we'll upload the file ([documentation](https://cloud.google.com/storage/docs/gsutil/commands/mb))."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"Bcpvh_R_6jKB","outputId":"e1c132b8-6a5c-46db-b1fa-f5768089890c"},"outputs":[{"name":"stdout","output_type":"stream","text":["Creating gs://colab-sample-bucket-44971372-baaf-11e7-ae30-0242ac110002/...\r\n"]}],"source":["!gsutil mb gs://{bucket_name}"]},{"cell_type":"markdown","metadata":{"id":"MHPM16gWWNvn"},"source":["Copy the file to our new bucket ([documentation](https://cloud.google.com/storage/docs/gsutil/commands/cp))."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":92},"id":"L5cMl7XV65be","outputId":"bb51e51d-7f5f-4e2b-935c-203b8d314115"},"outputs":[{"name":"stdout","output_type":"stream","text":["Copying file:///tmp/to_upload.txt [Content-Type=text/plain]...\n","/ [1 files][   14.0 B/   14.0 B]                                                \n","Operation completed over 1 objects/14.0 B.                                       \n"]}],"source":["!gsutil cp /tmp/to_upload.txt gs://{bucket_name}/"]},{"cell_type":"markdown","metadata":{"id":"xAPlMk6nWKNm"},"source":["Dump the contents of our newly copied file to make sure everything worked ([documentation](https://cloud.google.com/storage/docs/gsutil/commands/cat)).\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"pJGU6gX-7M-N","outputId":"38db2bd3-0879-4a2e-8f41-c9495ba570a9"},"outputs":[{"name":"stdout","output_type":"stream","text":["my sample file"]}],"source":["!gsutil cat gs://{bucket_name}/to_upload.txt"]},{"cell_type":"code","execution_count":null,"metadata":{"cellView":"form","colab":{"height":34},"id":"qoectKiGOABf","outputId":"97b483ac-c2b1-46f0-f4ac-61b3701a8c89"},"outputs":[{"name":"stdout","output_type":"stream","text":["https://console.cloud.google.com/storage/browser?project=Your_project_ID_here\n"]}],"source":["#@markdown Once the upload has finished, the data will appear in the Cloud Console storage browser for your project:\n","print('https://console.cloud.google.com/storage/browser?project=' + project_id)"]},{"cell_type":"markdown","metadata":{"id":"Q2CWQGIghDux"},"source":["Finally, we'll download the file we just uploaded in the example above. It's as simple as reversing the order in the `gsutil cp` command."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":110},"id":"lPdTf-6O73ll","outputId":"a6da299e-00ff-42a7-f845-9a93a4ccce61"},"outputs":[{"name":"stdout","output_type":"stream","text":["Copying gs://colab-sample-bucket483f20dc-baaf-11e7-ae30-0242ac110002/to_upload.txt...\n","/ [1 files][   14.0 B/   14.0 B]                                                \n","Operation completed over 1 objects/14.0 B.                                       \n","my sample file"]}],"source":["!gsutil cp gs://{bucket_name}/to_upload.txt /tmp/gsutil_download.txt\n","  \n","# Print the result to make sure the transfer worked.\n","!cat /tmp/gsutil_download.txt"]},{"cell_type":"markdown","metadata":{"id":"0ENMqxq25szn"},"source":["## Python API\n","\n","These snippets based on [a larger example](https://github.com/GoogleCloudPlatform/storage-file-transfer-json-python/blob/master/chunked_transfer.py) that shows additional uses of the API.\n","\n"," First, we create the service client."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wkJ5ShIgceqI"},"outputs":[],"source":["from googleapiclient.discovery import build\n","gcs_service = build('storage', 'v1')"]},{"cell_type":"markdown","metadata":{"id":"R1Hyoh07gQHY"},"source":["Create a local file to upload."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"height":51},"id":"s1htTNVlgQHe","outputId":"1a002b58-6c4d-46d0-9572-a43b9bccbfe8"},"outputs":[{"name":"stdout","output_type":"stream","text":["/tmp/to_upload.txt contains:\n","my sample file"]}],"source":["with open('/tmp/to_upload.txt', 'w') as f:\n","  f.write('my sample file')\n","\n","print('/tmp/to_upload.txt contains:')\n","!cat /tmp/to_upload.txt"]},{"cell_type":"markdown","metadata":{"id":"YJKBHaUlgDhl"},"source":["Create a bucket in the project specified above."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"YFVbF4cdhd9Y","outputId":"ffa2a4ec-ee02-4fc2-8ed4-a4d73d04e6be"},"outputs":[{"name":"stdout","output_type":"stream","text":["Done\n"]}],"source":["# Use a different globally-unique bucket name from the gsutil example above.\n","import uuid\n","bucket_name = 'colab-sample-bucket-' + str(uuid.uuid1())\n","\n","body = {\n","  'name': bucket_name,\n","  # For a full list of locations, see:\n","  # https://cloud.google.com/storage/docs/bucket-locations\n","  'location': 'us',\n","}\n","gcs_service.buckets().insert(project=project_id, body=body).execute()\n","print('Done')"]},{"cell_type":"markdown","metadata":{"id":"ppkrR7p4mx_P"},"source":["Upload the file to our newly created bucket."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"cFAq-F2af5TJ","outputId":"d07f7059-5767-4d58-ac71-e457a76e8c07"},"outputs":[{"name":"stdout","output_type":"stream","text":["Upload complete\n"]}],"source":["from googleapiclient.http import MediaFileUpload\n","\n","media = MediaFileUpload('/tmp/to_upload.txt', \n","                        mimetype='text/plain',\n","                        resumable=True)\n","\n","request = gcs_service.objects().insert(bucket=bucket_name, \n","                                       name='to_upload.txt',\n","                                       media_body=media)\n","\n","response = None\n","while response is None:\n","  # _ is a placeholder for a progress object that we ignore.\n","  # (Our file is small, so we skip reporting progress.)\n","  _, response = request.next_chunk()\n","\n","print('Upload complete')"]},{"cell_type":"code","execution_count":null,"metadata":{"cellView":"form","colab":{"height":34},"id":"Lvz1BspfpvTl","outputId":"97b483ac-c2b1-46f0-f4ac-61b3701a8c89"},"outputs":[{"name":"stdout","output_type":"stream","text":["https://console.cloud.google.com/storage/browser?project=Your_project_ID_here\n"]}],"source":["#@markdown Once the upload has finished, the data will appear in the Cloud Console storage browser for your project:\n","print('https://console.cloud.google.com/storage/browser?project=' + project_id)"]},{"cell_type":"markdown","metadata":{"id":"P6aWjfTv7bit"},"source":["Download the file we just uploaded."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"z1_FuDjAozF1","outputId":"ab14cf25-7b51-41c9-d88c-9a94f5c79dfc"},"outputs":[{"name":"stdout","output_type":"stream","text":["Download complete\n"]}],"source":["from apiclient.http import MediaIoBaseDownload\n","\n","with open('/tmp/downloaded_from_gcs.txt', 'wb') as f:\n","  request = gcs_service.objects().get_media(bucket=bucket_name,\n","                                            object='to_upload.txt')\n","  media = MediaIoBaseDownload(f, request)\n","\n","  done = False\n","  while not done:\n","    # _ is a placeholder for a progress object that we ignore.\n","    # (Our file is small, so we skip reporting progress.)\n","    _, done = media.next_chunk()\n","\n","print('Download complete')"]},{"cell_type":"markdown","metadata":{"id":"OnjWcDFogdY2"},"source":["Inspect the downloaded file.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"height":34},"id":"DxLyhaiBpAGX","outputId":"eb379e18-a6bf-4af2-caf4-f8b9c57f4a80"},"outputs":[{"name":"stdout","output_type":"stream","text":["my sample file"]}],"source":["!cat /tmp/downloaded_from_gcs.txt"]}],"metadata":{"colab":{"provenance":[{"file_id":"/v2/external/notebooks/io.ipynb","timestamp":1680389353034}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}